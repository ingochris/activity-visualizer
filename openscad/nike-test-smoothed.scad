use <write/Write.scad>
use <utils/build_plate.scad>

/* [Hidden] */

// Hourly  points for cube rendering
dailyActivity = [[[0, -0.01], [0, 14.0], [1, 11.25], [2, 24.75], [3, 19.75], [4, 18.0], [5, 15.5], [6, 0.5], [7, 0.5], [8, 3.25], [9, 3.25], [10, 3.0], [11, 3.0], [12, 0.0], [13, 0.0], [14, 0.0], [15, 0.0], [16, 0.0], [17, 0.0], [18, 0.0], [19, 0.0], [20, 0.0], [21, 0.0], [22, 0.25], [23, 0.25], [24, 0.25], [25, 0.25], [26, 0.0], [27, 0.5], [28, 0.75], [29, 8.5], [30, 31.0], [31, 30.5], [32, 40.0], [33, 33.25], [34, 12.25], [35, 14.5], [36, 37.75], [37, 72.5], [38, 128.75], [39, 186.25], [40, 181.5], [41, 156.5], [42, 109.5], [43, 74.75], [44, 60.5], [45, 51.5], [46, 45.0], [47, 21.25], [48, 11.5], [49, 34.5], [50, 60.5], [51, 68.75], [52, 73.0], [53, 52.75], [54, 22.75], [55, 14.25], [56, 10.25], [57, 6.75], [58, 9.75], [59, 9.0], [60, 4.5], [61, 5.0], [62, 3.75], [63, 14.0], [64, 34.0], [65, 33.0], [66, 31.0], [67, 23.75], [68, 7.25], [69, 8.25], [70, 9.0], [71, 41.75], [72, 97.5], [73, 158.5], [74, 186.75], [75, 170.5], [76, 138.75], [77, 78.5], [78, 51.75], [79, 44.75], [80, 23.25], [81, 32.75], [82, 36.75], [83, 27.25], [84, 26.5], [85, 15.25], [86, 14.75], [87, 13.75], [88, 12.0], [89, 15.25], [90, 14.75], [91, 18.25], [92, 21.25], [93, -0.01]], [[0, -0.01], [0, 49.5], [1, 45.25], [2, 43.75], [3, 14.0], [4, 3.0], [5, 0.5], [6, 0.25], [7, 0.5], [8, 0.75], [9, 0.75], [10, 0.75], [11, 0.5], [12, 0.25], [13, 0.25], [14, 0.25], [15, 0.25], [16, 0.25], [17, 0.25], [18, 0.0], [19, 0.0], [20, 0.0], [21, 0.0], [22, 0.0], [23, 0.0], [24, 0.25], [25, 0.25], [26, 0.25], [27, 0.25], [28, 0.25], [29, 0.25], [30, 0.25], [31, 0.25], [32, 0.0], [33, 0.0], [34, 0.0], [35, 11.75], [36, 42.75], [37, 47.75], [38, 48.25], [39, 45.0], [40, 23.25], [41, 20.25], [42, 34.5], [43, 31.5], [44, 30.0], [45, 34.5], [46, 32.5], [47, 45.75], [48, 47.5], [49, 42.75], [50, 31.75], [51, 23.75], [52, 16.75], [53, 56.0], [54, 70.75], [55, 67.5], [56, 73.0], [57, 46.25], [58, 40.25], [59, 56.75], [60, 70.5], [61, 58.25], [62, 63.0], [63, 53.0], [64, 35.5], [65, 47.0], [66, 40.25], [67, 31.0], [68, 34.25], [69, 29.25], [70, 28.75], [71, 26.5], [72, 36.0], [73, 53.0], [74, 66.0], [75, 65.0], [76, 57.0], [77, 65.0], [78, 48.0], [79, 47.25], [80, 43.25], [81, 18.0], [82, 18.75], [83, 20.0], [84, 20.25], [85, 14.5], [86, 17.75], [87, 30.5], [88, 27.75], [89, 39.0], [90, 53.5], [91, 49.0], [92, 49.25], [93, -0.01]], [[0, -0.01], [0, 85.75], [1, 87.75], [2, 77.0], [3, 56.5], [4, 17.75], [5, 16.75], [6, 16.25], [7, 15.25], [8, 15.25], [9, 9.75], [10, 0.75], [11, 0.75], [12, 0.75], [13, 0.75], [14, 0.0], [15, 0.0], [16, 0.0], [17, 0.25], [18, 1.0], [19, 1.0], [20, 1.0], [21, 1.0], [22, 0.25], [23, 0.25], [24, 0.25], [25, 0.0], [26, 0.0], [27, 0.0], [28, 0.25], [29, 0.25], [30, 0.25], [31, 0.25], [32, 0.25], [33, 0.25], [34, 0.75], [35, 5.75], [36, 21.25], [37, 40.5], [38, 46.25], [39, 44.75], [40, 37.0], [41, 28.0], [42, 22.0], [43, 63.25], [44, 75.0], [45, 71.0], [46, 81.25], [47, 58.25], [48, 56.25], [49, 97.0], [50, 102.5], [51, 83.0], [52, 82.0], [53, 49.0], [54, 33.0], [55, 30.75], [56, 14.25], [57, 1.25], [58, 1.25], [59, 1.75], [60, 20.0], [61, 23.5], [62, 24.0], [63, 24.75], [64, 13.5], [65, 22.25], [66, 43.0], [67, 72.0], [68, 74.75], [69, 64.25], [70, 56.75], [71, 37.0], [72, 47.0], [73, 47.0], [74, 40.5], [75, 37.0], [76, 23.75], [77, 29.25], [78, 33.5], [79, 31.0], [80, 40.75], [81, 45.75], [82, 51.0], [83, 55.25], [84, 41.5], [85, 29.5], [86, 13.0], [87, 4.5], [88, 3.5], [89, 2.25], [90, 2.25], [91, 16.75], [92, 22.5], [93, -0.01]], [[0, -0.01], [0, 51.5], [1, 39.75], [2, 4.5], [3, 3.75], [4, 3.75], [5, 0.0], [6, 0.5], [7, 0.5], [8, 0.5], [9, 0.5], [10, 0.0], [11, 0.0], [12, 0.0], [13, 0.0], [14, 0.0], [15, 0.0], [16, 0.0], [17, 0.0], [18, 0.0], [19, 0.25], [20, 0.25], [21, 0.25], [22, 0.25], [23, 0.0], [24, 0.5], [25, 0.5], [26, 1.5], [27, 2.0], [28, 1.75], [29, 2.5], [30, 18.75], [31, 32.25], [32, 36.75], [33, 36.0], [34, 36.5], [35, 50.0], [36, 86.75], [37, 137.75], [38, 181.0], [39, 200.25], [40, 173.5], [41, 132.75], [42, 79.0], [43, 42.25], [44, 33.0], [45, 35.0], [46, 32.75], [47, 23.5], [48, 25.0], [49, 15.75], [50, 11.25], [51, 12.0], [52, 7.75], [53, 28.0], [54, 37.75], [55, 37.0], [56, 34.25], [57, 11.0], [58, 19.25], [59, 36.75], [60, 49.25], [61, 54.0], [62, 37.75], [63, 22.25], [64, 14.5], [65, 19.0], [66, 17.25], [67, 19.25], [68, 20.5], [69, 24.0], [70, 36.0], [71, 59.5], [72, 111.25], [73, 153.75], [74, 200.5], [75, 215.75], [76, 174.5], [77, 160.25], [78, 130.5], [79, 120.75], [80, 118.5], [81, 90.75], [82, 70.25], [83, 56.5], [84, 69.75], [85, 104.5], [86, 126.25], [87, 126.25], [88, 117.75], [89, 84.0], [90, 57.0], [91, 37.75], [92, 23.0], [93, -0.01]], [[0, -0.01], [0, 20.5], [1, 20.0], [2, 20.0], [3, 1.25], [4, 0.0], [5, 0.75], [6, 0.75], [7, 0.75], [8, 0.75], [9, 0.0], [10, 0.25], [11, 0.25], [12, 0.5], [13, 0.5], [14, 0.25], [15, 0.25], [16, 0.0], [17, 0.0], [18, 0.0], [19, 0.0], [20, 0.0], [21, 0.0], [22, 0.0], [23, 0.0], [24, 0.0], [25, 0.0], [26, 0.25], [27, 0.75], [28, 5.5], [29, 14.25], [30, 30.75], [31, 42.0], [32, 75.25], [33, 123.75], [34, 163.5], [35, 203.75], [36, 172.0], [37, 128.0], [38, 82.0], [39, 39.5], [40, 46.75], [41, 41.75], [42, 40.0], [43, 37.75], [44, 27.5], [45, 25.5], [46, 18.75], [47, 14.25], [48, 12.75], [49, 6.5], [50, 36.25], [51, 50.0], [52, 75.0], [53, 75.25], [54, 45.0], [55, 29.0], [56, 3.25], [57, 4.25], [58, 13.25], [59, 13.75], [60, 13.5], [61, 13.75], [62, 6.25], [63, 8.25], [64, 18.75], [65, 22.5], [66, 22.75], [67, 44.25], [68, 95.75], [69, 152.25], [70, 191.25], [71, 177.5], [72, 155.0], [73, 114.25], [74, 77.0], [75, 70.75], [76, 70.5], [77, 85.25], [78, 95.25], [79, 95.75], [80, 64.0], [81, 36.0], [82, 32.75], [83, 30.0], [84, 31.0], [85, 28.75], [86, 34.5], [87, 33.5], [88, 26.25], [89, 23.5], [90, 9.25], [91, 14.75], [92, 13.0], [93, -0.01]], [[0, -0.01], [0, 21.5], [1, 22.25], [2, 3.0], [3, 2.0], [4, 1.0], [5, 0.0], [6, 0.0], [7, 0.0], [8, 0.0], [9, 0.0], [10, 0.0], [11, 0.0], [12, 1.0], [13, 1.0], [14, 1.0], [15, 1.0], [16, 0.0], [17, 0.0], [18, 0.0], [19, 0.0], [20, 0.0], [21, 0.25], [22, 1.0], [23, 1.25], [24, 1.5], [25, 1.25], [26, 0.5], [27, 1.25], [28, 1.5], [29, 19.75], [30, 33.75], [31, 44.5], [32, 55.25], [33, 56.0], [34, 45.0], [35, 69.75], [36, 108.5], [37, 144.5], [38, 195.75], [39, 175.75], [40, 126.5], [41, 75.75], [42, 42.5], [43, 34.75], [44, 35.0], [45, 34.0], [46, 20.5], [47, 26.5], [48, 28.25], [49, 27.5], [50, 21.5], [51, 9.25], [52, 9.25], [53, 28.75], [54, 52.25], [55, 57.5], [56, 66.25], [57, 54.0], [58, 38.5], [59, 54.25], [60, 51.25], [61, 44.5], [62, 38.5], [63, 21.5], [64, 22.25], [65, 22.25], [66, 20.0], [67, 13.5], [68, 21.5], [69, 62.25], [70, 68.5], [71, 85.5], [72, 96.25], [73, 78.25], [74, 75.5], [75, 66.0], [76, 71.5], [77, 73.5], [78, 71.25], [79, 69.25], [80, 58.5], [81, 78.5], [82, 95.0], [83, 103.5], [84, 110.5], [85, 116.25], [86, 158.5], [87, 189.25], [88, 180.0], [89, 132.25], [90, 71.5], [91, 27.25], [92, 14.0], [93, -0.01]], [[0, -0.01], [0, 26.5], [1, 27.5], [2, 26.75], [3, 2.5], [4, 1.75], [5, 0.75], [6, 0.75], [7, 0.75], [8, 0.75], [9, 0.25], [10, 0.25], [11, 0.25], [12, 0.0], [13, 0.0], [14, 0.0], [15, 0.0], [16, 0.0], [17, 0.0], [18, 0.0], [19, 0.0], [20, 0.0], [21, 0.0], [22, 0.0], [23, 0.0], [24, 0.25], [25, 0.25], [26, 1.75], [27, 2.0], [28, 8.75], [29, 21.5], [30, 49.25], [31, 69.75], [32, 72.5], [33, 86.5], [34, 92.75], [35, 131.25], [36, 169.5], [37, 185.0], [38, 161.25], [39, 120.75], [40, 83.0], [41, 52.0], [42, 49.0], [43, 38.0], [44, 46.0], [45, 43.5], [46, 40.25], [47, 37.0], [48, 19.5], [49, 11.25], [50, 7.25], [51, 2.75], [52, 3.5], [53, 3.75], [54, 6.25], [55, 21.0], [56, 27.5], [57, 27.75], [58, 24.25], [59, 17.75], [60, 16.75], [61, 21.0], [62, 58.5], [63, 78.0], [64, 89.75], [65, 87.5], [66, 51.5], [67, 24.25], [68, 6.75], [69, 5.0], [70, 4.0], [71, 5.0], [72, 43.25], [73, 108.75], [74, 174.25], [75, 204.75], [76, 180.25], [77, 146.5], [78, 86.5], [79, 58.5], [80, 56.75], [81, 47.75], [82, 55.75], [83, 61.0], [84, 48.75], [85, 25.0], [86, 11.0], [87, 3.25], [88, 3.0], [89, 2.75], [90, 2.75], [91, 2.0], [92, 1.5], [93, -0.01]]] ;

// Format of activity data
dailyActivityFormat = "points" ; //[values:Values, points:Points for polygon]

// Daily  point totals 
dailytotal = [3263, 2645, 2777, 4617, 3710, 4325, 3625] ;

// Start date
startDate = "" ;

// End date
endDate = "" ;

/* [Nike Data] */

// Fuel point goal
target = 0 ;

// Label (e.g. Robert 104,329)
name = "" ;

// Which one would you like to see?
part = "both"; // [both:One color,left:First color,right:Second color]

/* [Scale] */

// Left to right size
width = 200;

// Front to back size (not counting label)
height = 100;

// Scale height of data (0.1 means 0.1mm per Fuel point)
heightScale = 0.1;

// Scale height of totals (0.01 means 0.01mm per Fuel point)
totalScale = 0.01;

// Daily Fuel bar width
dailyWidthScale = 1.01; //[0.5:Narrow, 0.9:Wide, 1.01:Continuous]

// Thickness of base
baseH = 2;

// Wall thickness (vertical charts @ back)
wall = 5;

//label height
labelH = 10;

//label margin (adjust to make dates look good)
labelM = 20;

/* [Buid Plate] */

//for display only, doesn't contribute to final object
build_plate_selector = 0; //[0:Replicator 2,1: Replicator,2:Thingomatic,3:Manual]

//when Build Plate Selector is set to "manual" this controls the build plate x dimension
build_plate_manual_x = 100; //[100:400]

//when Build Plate Selector is set to "manual" this controls the build plate y dimension
build_plate_manual_y = 100; //[100:400]

numDays = len(dailyActivity);

numSamples = len(dailyActivity[0]);

fontH = labelH*0.7;
middle=width/2;
left = labelM+labelH; // leave room for Nike + logo
right = width-labelM;
dateH = fontH*.7;

xscale = width / numDays;
yscale = height / numSamples;

g=0.01*1;

echo(str(numDays," days with ", numSamples," samples. xscale ",xscale," yscale ",yscale,"."));

od = 20;
thick = 4;
plush = 1;
pgap = 15;

pluslen = od*.7;
plusthick = 3;

gapangle = 26;

module plus() {
	difference() {
		cylinder(r=od,h=plush);
		translate([0,0,-1]) cylinder(r=od-thick,h=plush+2);
		translate([-pgap/2,-od-1,-1]) cube([pgap,od+1,plush+2]);
		rotate([0,0,gapangle]) translate([-thick,-od-1,-1]) cube([thick,thick+2,plush+2]);
		rotate([0,0,-gapangle]) translate([0,-od-1,-1]) cube([thick,thick+2,plush+2]);
		}

	rotate([0,0,gapangle]) translate([0,-(od-thick/2),0]) cylinder(r=thick/2,h=plush);
	rotate([0,0,-gapangle]) translate([0,-(od-thick/2),0]) cylinder(r=thick/2,h=plush);

	rotate([0,0,-15]) {
		translate([-plusthick/2,-pluslen/2,0]) cube([plusthick,pluslen,plush]);
		translate([0,pluslen/2,0]) cylinder(r=plusthick/2,plush);
		translate([0,-pluslen/2,0]) cylinder(r=plusthick/2,plush);
		}

	rotate([0,0,90]) {
		translate([-plusthick/2,-pluslen/2,0]) cube([plusthick,pluslen,plush]);
		translate([0,pluslen/2,0]) cylinder(r=plusthick/2,plush);
		translate([0,-pluslen/2,0]) cylinder(r=plusthick/2,plush);
		}
	}

plusscale = (labelH-2)/(2*od);
echo("plus scale",plusscale);

module printIt() {

	// base

	if ((part=="both") || (part=="right")) color("blue") {
		translate([0,-labelH,0]) cube([width+g,height+labelH+3*wall+g,baseH]);
		}

	// labels

	if ((part=="both") || (part=="left")) color("white") {
		translate([middle,-labelH/2,baseH]) color("white") write(name, h=fontH, center=true);
		translate([left,-labelH/2,baseH]) color("white") write(startDate, h=dateH, center=true);
		translate([right,-labelH/2,baseH]) color("white") write(endDate, h=dateH, center=true);
		translate([labelH/2,-labelH/2,baseH]) scale([plusscale,plusscale,1]) plus();
		}

	// daily activity

	if ((part=="both") || (part=="left")) color("white") {
		for (day = [0:numDays-1]) {
			assign (xpos = day*xscale) {
				if (dailyActivityFormat == "values") { // draw activity using blocks
					for (sample = [0:numSamples-1]) {
						assign (ypos = sample*yscale) {
							translate([width-xpos-xscale,ypos,baseH]) cube([xscale+g,yscale+g,
								heightScale*(dailyActivity[day][sample-1]+dailyActivity[day][sample]+dailyActivity[day][sample+1])/3 ]);
							}
						}
					}
				else { // draw polygons
					translate([width-xpos-xscale,0,baseH]) 
						scale([xscale,yscale,heightScale])
						rotate([90,0,90])
						linear_extrude(height = 1, center = false, convexity = 0, twist = 0, slices = 10) {
							polygon(
								points=dailyActivity[day]);
							}
					}
				translate([width-xpos-xscale,height+wall,baseH]) cube([dailyWidthScale*xscale,wall,totalScale*dailytotal[day]]);
				}
			}
		}

	if ((part=="both") || (part=="right")) color("blue") {
		translate([0,height+2*wall,baseH]) cube([width+g,wall,totalScale*target]);
		}
	}

	translate([-middle,-height/2-labelH/2,0]) printIt();

	build_plate(build_plate_selector,build_plate_manual_x,build_plate_manual_y);